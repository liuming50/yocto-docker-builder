#!/usr/bin/env python

import argparse
import errno
import fcntl
import hashlib
import os
import re
import shutil
import subprocess
import sys
import time

parser = argparse.ArgumentParser()
parser.add_argument("-b", "--builddir", help ="path of build directory (defaults to 'build')", type = str, default = "build")
parser.add_argument("-c", "--cleanconf", help = "clean the build/conf directory", action = "store_true")
parser.add_argument("-d", "--downloads", help = "path stored with the downloads, will be mounted as a volume", type = str, default = "")
parser.add_argument("-t", "--command", help = "run build command directly and exit the builder", type = str, default = "", nargs = argparse.REMAINDER)

args = parser.parse_args()

class BaseConfig(object):
    class Logger(object):
        DEBUG, NOTE, WARNING, ERROR, CRITICAL = list(range(0,5))
        BASECOLOR, BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE = list(range(29,38))
        LEVELNAMES = {
            DEBUG   : "DEBUG",
            NOTE    : "NOTE",
            WARNING : "WARNING",
            ERROR   : "ERROR",
            CRITICAL: "CRITICAL",
        }

        COLORS = {
            DEBUG   : CYAN,
            NOTE    : BASECOLOR,
            WARNING : YELLOW,
            ERROR   : RED,
            CRITICAL: RED,
        }

        BLD = '\033[1;%dm'
        STD = '\033[%dm'
        RST = '\033[0m'

        colored = True

        def disable_color(self):
            self.colored = False

        def colorize(self, levelno, msg):
            color = self.COLORS[levelno]
            levelname = self.LEVELNAMES[levelno]
            if self.colored and color is not None and levelname is not None:
                level = "".join([self.BLD % color, levelname, self.RST])
                msg = "".join([self.STD % color, msg, self.RST])
                return "%s: %s" % (level, msg)
            return msg

        def debug(self, msg):
            print(self.colorize(self.DEBUG, msg))

        def note(self, msg):
            print(self.colorize(self.NOTE, msg))

        def warn(self, msg):
            print(self.colorize(self.WARNING, msg))

        def error(self, msg):
            print(self.colorize(self.ERROR, msg))

        def critical(self, msg):
            print(self.colorize(self.CRITICAL, msg))

    logger = Logger()

    def __init__(self):
        self.uid = os.getuid()
        self.gid = os.getgid()

        # Any change in the listed items will triger a rebuild
        self.checkfilelist = "home Dockerfile start.sh"
        self.checkvarslist = "builddir"

    def _mkdirhier(self, directory):
        """
        Create a directory like 'mkdir -p', but does not complain if
        directory already exists like os.makedirs
        """

        try:
            os.makedirs(directory)
        except OSError as e:
            if e.errno != errno.EEXIST:
                raise e

    def _is_file_newer(self, file, timestamp):
        """
        Check if the file modify time newer than the timestamp
        """

        return True if os.stat(file).st_mtime > timestamp else False

    def check_vars(self):
        """
        Check system arguments passed to this script, and set related
        variables according to how it's being called
        """

        if self.uid == 0:
            self.uid = 1000
        if self.gid == 0:
            self.gid = 1000

        self.builddir = args.builddir
        self.command = args.command
        self.downloads_opts = "-v %s:/opt/yocto/downloads" % args.downloads if args.downloads else ""

    def change_cwd(self):
        """
        Ensure the current working directory is same with the
        directory where this script is locating in, and the script
        itself should be a symbolic link to docker/setup.
        """

        try:
            if os.readlink(__file__) != os.path.join("docker", "setup"):
                raise OSError("The link target does not exist.")
        except OSError:
            self.logger.error("setup script must be run in the top directory. (not in this docker directory)")
            exit(1)

        execdir = os.path.dirname(os.path.abspath(__file__))
        if os.getcwd() != execdir:
            self.logger.note("Changing cwd to %s" % execdir)
            os.chdir(execdir)

    def check_docker(self):
        """
        Check if docker binary exists in PATH and its version
        is higher than 1.0
        """

        # Check docker binary
        dockerbin=""
        for p in os.getenv('PATH').split(':'):
            candidate = os.path.join(p, 'docker')
            if os.path.isfile(candidate) and os.access(candidate, os.X_OK):
                dockerbin = candidate
                if not os.path.isabs(dockerbin):
                    dockerbin = os.path.abspath(dockerbin)
                # Found the first executable docker
                break
        if not dockerbin:
            self.logger.error("Can not find docker in PATH. you must have docker installed!")
            exit(1)

        # Check docker version
        dockerver = subprocess.check_output("%s --version" % dockerbin, shell = True).decode('utf-8')
        dockerver = re.match("^.*([0-9]+\.[0-9]+\.[0-9]+).*$", dockerver).group(1)
        if int(dockerver.split('.')[0]) < 1:
            self.logger.error("docker version must be higher than 1.0, current is %s" % dockerver)
            exit(1)

    def build_image(self):
        """
        Build builder image if it does not exist, or compare its
        '.Created' information with the 'Modify' timestamp of all files
        in checkfilelist, and rebuild the image if any of the timestamp
        is later than image 'Created' time.
        """

        rebuild = False
        nocache = "false"
        try:
            output = subprocess.check_output("docker inspect --format={{.Created}} builder:yocto 2>/dev/null", shell = True).decode('utf-8')
            m = re.match(r'(^[0-9]{4}-[0-9]{2}-[0-9]{2})[a-zA-Z ]{1}([0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{6}).*$', output)
            created = time.mktime(time.strptime('%s %s' % (m.group(1), m.group(2)), '%Y-%m-%d %H:%M:%S.%f'))

            # Check file 'Modify' timestamp of checkfilelist
            for l in self.checkfilelist.split():
                p = "docker/%s" % l
                if os.path.isdir(p):
                    for root, _, files in os.walk(p):
                        for f in files:
                            file = os.path.join(root, f)
                            if self._is_file_newer(file, created):
                                rebuild = True
                                break
                elif os.path.isfile(p):
                    if self._is_file_newer(p, created):
                        rebuild = True
                        break

            # Check variable changes of checkvarslist
            data = ""
            for v in self.checkvarslist.split():
                data += str(eval("self.%s" % v)).strip()
            datahash = hashlib.md5(data.encode("utf-8")).hexdigest()
            try:
                if open(".sigdata", 'r').read() != datahash:
                    rebuild = True
                    nocache = "true"
            except IOError:
                rebuild = True
                nocache = "true"
            finally:
                open(".sigdata", 'w').write(datahash)

        except subprocess.CalledProcessError:
            rebuild = True

        if rebuild:
            cmd = "cd docker; docker build --no-cache=%s -t builder:yocto ./" % nocache
            self.logger.note("Building docker builder image... (This may take some time.)")
            subprocess.check_output(cmd, shell = True)

    def start_image(self):
        """
        Start the builder image in docker
        """

        conf = "%s/conf" % self.builddir
        if args.cleanconf and os.path.exists(conf):
            shutil.rmtree(conf)

        displayargs = os.getenv('DISPLAY')
        psedottyargs = "" if self.command else "-t"
        cmd = "docker run --privileged=true --rm -h Ubuntu-Bionic -e DISPLAY=%s -i %s \
            -v /tmp/.X11-unix/:/tmp/.X11-unix/ -v %s:/opt/yocto %s builder:yocto %s %s \"%s\" \"%s\"" \
            % (displayargs, psedottyargs, os.getcwd(), self.downloads_opts, self.uid, self.gid, self.builddir, " ".join(self.command))

        self.logger.note("Running build machine...")
        return subprocess.call(cmd, shell = True)

    def setup(self):
        self.check_vars()
        self.change_cwd()
        self.check_docker()
        self.build_image()
        return self.start_image()

if __name__ == "__main__":
    try:
        config = BaseConfig()
        ret = config.setup()
    except Exception as esc:
        ret = 1
        import traceback
        traceback.print_exc()
    sys.exit(ret)
